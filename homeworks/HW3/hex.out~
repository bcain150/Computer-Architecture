GNU gdb (GDB) Fedora 9.1-5.fc32
Copyright (C) 2020 Free Software Foundation, Inc.
License GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>
This is free software: you are free to change and redistribute it.
There is NO WARRANTY, to the extent permitted by law.
Type "show copying" and "show warranty" for details.
This GDB was configured as "x86_64-redhat-linux-gnu".
Type "show configuration" for configuration details.
For bug reporting instructions, please see:
<http://www.gnu.org/software/gdb/bugs/>.
Find the GDB manual and other documentation resources online at:
    <http://www.gnu.org/software/gdb/documentation/>.

For help, type "help".
Type "apropos word" to search for commands related to "word"...
Reading symbols from a.out...
(gdb) list 1,26
1	/* matmul2.c  100*100 matrix element by element multiply */
2	#include <stdio.h>
3	
4	int main()
5	{
6	  const int N = 100;
7	  double a[N][N]; /* input matrix */
8	  double b[N][N]; /* input matrix */
9	  double c[N][N]; /* result matrix */
10	  int i,j;
11	
12	  printf("starting multiply\n");
13	  a[1][1] = 3.5;
14	  b[1][1] = 1.2; /* not a valid benchmark, most elements zero */
15	
16	  for(i=0; i<N; i++){
17	    for(j=0; j<N; j++){
18	front:
19	        c[i][j] = a[i][j]*b[i][j]; /* most time spent here! */
20	back:;
21	    }
22	  }
23	  printf("a result %g \n", c[1][1]); /* prevent dead code elimination */
24	  return 0;
25	}
26	
(gdb) 
(gdb) break main
Breakpoint 1 at 0x401050: file matmul2.c, line 7.
(gdb) run
Starting program: /afs/umbc.edu/users/b/c/bcain1/home/411/homeworks/HW3/a.out 
Missing separate debuginfos, use: dnf debuginfo-install glibc-2.31-4.fc32.x86_64

Breakpoint 1, main () at matmul2.c:7
7	  double a[N][N]; /* input matrix */
(gdb) disassemble
Dump of assembler code for function main:
=> 0x0000000000401050 <+0>:	push   %rbp
   0x0000000000401051 <+1>:	mov    $0x402010,%edi
   0x0000000000401056 <+6>:	mov    %rsp,%rbp
   0x0000000000401059 <+9>:	push   %r15
   0x000000000040105b <+11>:	push   %r14
   0x000000000040105d <+13>:	push   %r13
   0x000000000040105f <+15>:	push   %r12
   0x0000000000401061 <+17>:	push   %rbx
   0x0000000000401062 <+18>:	sub    $0x13898,%rsp
   0x0000000000401069 <+25>:	lea    0x7(%rsp),%r8
   0x000000000040106e <+30>:	sub    $0x13880,%rsp
   0x0000000000401075 <+37>:	lea    0x7(%rsp),%r15
   0x000000000040107a <+42>:	mov    %r8,%r14
   0x000000000040107d <+45>:	sub    $0x13880,%rsp
   0x0000000000401084 <+52>:	and    $0xfffffffffffffff8,%r8
   0x0000000000401088 <+56>:	mov    %r8,-0x38(%rbp)
   0x000000000040108c <+60>:	shr    $0x3,%r14
   0x0000000000401090 <+64>:	mov    %r15,%r13
   0x0000000000401093 <+67>:	lea    0x7(%rsp),%r12
   0x0000000000401098 <+72>:	callq  0x401030 <puts@plt>
   0x000000000040109d <+77>:	shr    $0x3,%r13
   0x00000000004010a1 <+81>:	mov    %r12,%rbx
   0x00000000004010a4 <+84>:	mov    -0x38(%rbp),%r8
   0x00000000004010a8 <+88>:	and    $0xfffffffffffffff8,%r15
   0x00000000004010ac <+92>:	shr    $0x3,%rbx
   0x00000000004010b0 <+96>:	and    $0xfffffffffffffff8,%r12
   0x00000000004010b4 <+100>:	xor    %edi,%edi
   0x00000000004010b6 <+102>:	mov    0xf73(%rip),%rax        # 0x402030
   0x00000000004010bd <+109>:	mov    %rax,0x328(,%r14,8)
   0x00000000004010c5 <+117>:	mov    0xf6c(%rip),%rax        # 0x402038
   0x00000000004010cc <+124>:	mov    %rax,0x328(,%r13,8)
   0x00000000004010d4 <+132>:	lea    (%r8,%rdi,1),%rsi
   0x00000000004010d8 <+136>:	lea    (%r15,%rdi,1),%rcx
   0x00000000004010dc <+140>:	xor    %eax,%eax
   0x00000000004010de <+142>:	lea    (%r12,%rdi,1),%rdx
   0x00000000004010e2 <+146>:	nopw   0x0(%rax,%rax,1)
   0x00000000004010e8 <+152>:	movupd (%rsi,%rax,1),%xmm0
   0x00000000004010ed <+157>:	movupd (%rcx,%rax,1),%xmm1
   0x00000000004010f2 <+162>:	mulpd  %xmm1,%xmm0
   0x00000000004010f6 <+166>:	movups %xmm0,(%rdx,%rax,1)
   0x00000000004010fa <+170>:	add    $0x10,%rax
   0x00000000004010fe <+174>:	cmp    $0x320,%rax
   0x0000000000401104 <+180>:	jne    0x4010e8 <main+152>
   0x0000000000401106 <+182>:	add    $0x320,%rdi
   0x000000000040110d <+189>:	cmp    $0x13880,%rdi
   0x0000000000401114 <+196>:	jne    0x4010d4 <main+132>
   0x0000000000401116 <+198>:	movsd  0x328(,%rbx,8),%xmm0
   0x000000000040111f <+207>:	mov    $0x402022,%edi
   0x0000000000401124 <+212>:	mov    $0x1,%eax
   0x0000000000401129 <+217>:	callq  0x401040 <printf@plt>
   0x000000000040112e <+222>:	lea    -0x28(%rbp),%rsp
   0x0000000000401132 <+226>:	xor    %eax,%eax
   0x0000000000401134 <+228>:	pop    %rbx
   0x0000000000401135 <+229>:	pop    %r12
   0x0000000000401137 <+231>:	pop    %r13
   0x0000000000401139 <+233>:	pop    %r14
   0x000000000040113b <+235>:	pop    %r15
   0x000000000040113d <+237>:	pop    %rbp
   0x000000000040113e <+238>:	retq   
End of assembler dump.
(gdb) 
Dump of assembler code for function main:
=> 0x0000000000401050 <+0>:	push   %rbp
   0x0000000000401051 <+1>:	mov    $0x402010,%edi
   0x0000000000401056 <+6>:	mov    %rsp,%rbp
   0x0000000000401059 <+9>:	push   %r15
   0x000000000040105b <+11>:	push   %r14
   0x000000000040105d <+13>:	push   %r13
   0x000000000040105f <+15>:	push   %r12
   0x0000000000401061 <+17>:	push   %rbx
   0x0000000000401062 <+18>:	sub    $0x13898,%rsp
   0x0000000000401069 <+25>:	lea    0x7(%rsp),%r8
   0x000000000040106e <+30>:	sub    $0x13880,%rsp
   0x0000000000401075 <+37>:	lea    0x7(%rsp),%r15
   0x000000000040107a <+42>:	mov    %r8,%r14
   0x000000000040107d <+45>:	sub    $0x13880,%rsp
   0x0000000000401084 <+52>:	and    $0xfffffffffffffff8,%r8
   0x0000000000401088 <+56>:	mov    %r8,-0x38(%rbp)
   0x000000000040108c <+60>:	shr    $0x3,%r14
   0x0000000000401090 <+64>:	mov    %r15,%r13
   0x0000000000401093 <+67>:	lea    0x7(%rsp),%r12
   0x0000000000401098 <+72>:	callq  0x401030 <puts@plt>
   0x000000000040109d <+77>:	shr    $0x3,%r13
   0x00000000004010a1 <+81>:	mov    %r12,%rbx
   0x00000000004010a4 <+84>:	mov    -0x38(%rbp),%r8
   0x00000000004010a8 <+88>:	and    $0xfffffffffffffff8,%r15
   0x00000000004010ac <+92>:	shr    $0x3,%rbx
   0x00000000004010b0 <+96>:	and    $0xfffffffffffffff8,%r12
   0x00000000004010b4 <+100>:	xor    %edi,%edi
   0x00000000004010b6 <+102>:	mov    0xf73(%rip),%rax        # 0x402030
   0x00000000004010bd <+109>:	mov    %rax,0x328(,%r14,8)
   0x00000000004010c5 <+117>:	mov    0xf6c(%rip),%rax        # 0x402038
   0x00000000004010cc <+124>:	mov    %rax,0x328(,%r13,8)
   0x00000000004010d4 <+132>:	lea    (%r8,%rdi,1),%rsi
   0x00000000004010d8 <+136>:	lea    (%r15,%rdi,1),%rcx
   0x00000000004010dc <+140>:	xor    %eax,%eax
   0x00000000004010de <+142>:	lea    (%r12,%rdi,1),%rdx
   0x00000000004010e2 <+146>:	nopw   0x0(%rax,%rax,1)
   0x00000000004010e8 <+152>:	movupd (%rsi,%rax,1),%xmm0
   0x00000000004010ed <+157>:	movupd (%rcx,%rax,1),%xmm1
   0x00000000004010f2 <+162>:	mulpd  %xmm1,%xmm0
   0x00000000004010f6 <+166>:	movups %xmm0,(%rdx,%rax,1)
   0x00000000004010fa <+170>:	add    $0x10,%rax
   0x00000000004010fe <+174>:	cmp    $0x320,%rax
   0x0000000000401104 <+180>:	jne    0x4010e8 <main+152>
   0x0000000000401106 <+182>:	add    $0x320,%rdi
   0x000000000040110d <+189>:	cmp    $0x13880,%rdi
   0x0000000000401114 <+196>:	jne    0x4010d4 <main+132>
   0x0000000000401116 <+198>:	movsd  0x328(,%rbx,8),%xmm0
   0x000000000040111f <+207>:	mov    $0x402022,%edi
   0x0000000000401124 <+212>:	mov    $0x1,%eax
   0x0000000000401129 <+217>:	callq  0x401040 <printf@plt>
   0x000000000040112e <+222>:	lea    -0x28(%rbp),%rsp
   0x0000000000401132 <+226>:	xor    %eax,%eax
   0x0000000000401134 <+228>:	pop    %rbx
   0x0000000000401135 <+229>:	pop    %r12
   0x0000000000401137 <+231>:	pop    %r13
   0x0000000000401139 <+233>:	pop    %r14
   0x000000000040113b <+235>:	pop    %r15
   0x000000000040113d <+237>:	pop    %rbp
   0x000000000040113e <+238>:	retq   
End of assembler dump.
(gdb) 
Dump of assembler code for function main:
=> 0x0000000000401050 <+0>:	push   %rbp
   0x0000000000401051 <+1>:	mov    $0x402010,%edi
   0x0000000000401056 <+6>:	mov    %rsp,%rbp
   0x0000000000401059 <+9>:	push   %r15
   0x000000000040105b <+11>:	push   %r14
   0x000000000040105d <+13>:	push   %r13
   0x000000000040105f <+15>:	push   %r12
   0x0000000000401061 <+17>:	push   %rbx
   0x0000000000401062 <+18>:	sub    $0x13898,%rsp
   0x0000000000401069 <+25>:	lea    0x7(%rsp),%r8
   0x000000000040106e <+30>:	sub    $0x13880,%rsp
   0x0000000000401075 <+37>:	lea    0x7(%rsp),%r15
   0x000000000040107a <+42>:	mov    %r8,%r14
   0x000000000040107d <+45>:	sub    $0x13880,%rsp
   0x0000000000401084 <+52>:	and    $0xfffffffffffffff8,%r8
   0x0000000000401088 <+56>:	mov    %r8,-0x38(%rbp)
   0x000000000040108c <+60>:	shr    $0x3,%r14
   0x0000000000401090 <+64>:	mov    %r15,%r13
   0x0000000000401093 <+67>:	lea    0x7(%rsp),%r12
   0x0000000000401098 <+72>:	callq  0x401030 <puts@plt>
   0x000000000040109d <+77>:	shr    $0x3,%r13
   0x00000000004010a1 <+81>:	mov    %r12,%rbx
   0x00000000004010a4 <+84>:	mov    -0x38(%rbp),%r8
   0x00000000004010a8 <+88>:	and    $0xfffffffffffffff8,%r15
   0x00000000004010ac <+92>:	shr    $0x3,%rbx
   0x00000000004010b0 <+96>:	and    $0xfffffffffffffff8,%r12
   0x00000000004010b4 <+100>:	xor    %edi,%edi
   0x00000000004010b6 <+102>:	mov    0xf73(%rip),%rax        # 0x402030
   0x00000000004010bd <+109>:	mov    %rax,0x328(,%r14,8)
   0x00000000004010c5 <+117>:	mov    0xf6c(%rip),%rax        # 0x402038
   0x00000000004010cc <+124>:	mov    %rax,0x328(,%r13,8)
   0x00000000004010d4 <+132>:	lea    (%r8,%rdi,1),%rsi
   0x00000000004010d8 <+136>:	lea    (%r15,%rdi,1),%rcx
   0x00000000004010dc <+140>:	xor    %eax,%eax
   0x00000000004010de <+142>:	lea    (%r12,%rdi,1),%rdx
   0x00000000004010e2 <+146>:	nopw   0x0(%rax,%rax,1)
   0x00000000004010e8 <+152>:	movupd (%rsi,%rax,1),%xmm0
   0x00000000004010ed <+157>:	movupd (%rcx,%rax,1),%xmm1
   0x00000000004010f2 <+162>:	mulpd  %xmm1,%xmm0
   0x00000000004010f6 <+166>:	movups %xmm0,(%rdx,%rax,1)
   0x00000000004010fa <+170>:	add    $0x10,%rax
   0x00000000004010fe <+174>:	cmp    $0x320,%rax
   0x0000000000401104 <+180>:	jne    0x4010e8 <main+152>
   0x0000000000401106 <+182>:	add    $0x320,%rdi
   0x000000000040110d <+189>:	cmp    $0x13880,%rdi
   0x0000000000401114 <+196>:	jne    0x4010d4 <main+132>
   0x0000000000401116 <+198>:	movsd  0x328(,%rbx,8),%xmm0
   0x000000000040111f <+207>:	mov    $0x402022,%edi
   0x0000000000401124 <+212>:	mov    $0x1,%eax
   0x0000000000401129 <+217>:	callq  0x401040 <printf@plt>
   0x000000000040112e <+222>:	lea    -0x28(%rbp),%rsp
   0x0000000000401132 <+226>:	xor    %eax,%eax
   0x0000000000401134 <+228>:	pop    %rbx
   0x0000000000401135 <+229>:	pop    %r12
   0x0000000000401137 <+231>:	pop    %r13
   0x0000000000401139 <+233>:	pop    %r14
   0x000000000040113b <+235>:	pop    %r15
   0x000000000040113d <+237>:	pop    %rbp
   0x000000000040113e <+238>:	retq   
End of assembler dump.
(gdb) x/60x main
0x401050 <main>:	0x2010bf55	0x89480040	0x415741e5	0x41554156
0x401060 <main+16>:	0x81485354	0x013898ec	0x448d4c00	0x81480724
0x401070 <main+32>:	0x013880ec	0x7c8d4c00	0x894d0724	0xec8148c6
0x401080 <main+48>:	0x00013880	0xf8e08349	0xc845894c	0x03eec149
0x401090 <main+64>:	0x4cfd894d	0x0724648d	0xffff93e8	0xedc149ff
0x4010a0 <main+80>:	0xe3894c03	0xc8458b4c	0xf8e78349	0x03ebc148
0x4010b0 <main+96>:	0xf8e48349	0x8b48ff31	0x000f7305	0x04894a00
0x4010c0 <main+112>:	0x000328f5	0x058b4800	0x00000f6c	0xed04894a
0x4010d0 <main+128>:	0x00000328	0x38348d49	0x3f0c8d49	0x8d49c031
0x4010e0 <main+144>:	0x0f663c14	0x0000441f	0x04100f66	0x100f6606
0x4010f0 <main+160>:	0x0f66010c	0x110fc159	0x83480204	0x3d4810c0
0x401100 <main+176>:	0x00000320	0x8148e275	0x000320c7	0xff814800
0x401110 <main+192>:	0x00013880	0x0ff2be75	0x28dd0410	0xbf000003
0x401120 <main+208>:	0x00402022	0x000001b8	0xff12e800	0x8d48ffff
0x401130 <main+224>:	0xc031d865	0x415c415b	0x415e415d	0x90c35d5f
(gdb) 
0x401140 <_start>:	0xfa1e0ff3	0x8949ed31	0x89485ed1	0xe48348e2
0x401150 <_start+16>:	0x495450f0	0x12a0c0c7	0xc7480040	0x401230c1
0x401160 <_start+32>:	0xc7c74800	0x00401050	0x2e8215ff	0x90f40000
0x401170 <_dl_relocate_static_pie>:	0xfa1e0ff3	0x0f2e66c3	0x0000841f	0x90000000
0x401180 <deregister_tm_clones>:	0x404030b8	0x303d4800	0x74004040	0x0000b813
0x401190 <deregister_tm_clones+16>:	0x85480000	0xbf0974c0	0x00404030	0x9066e0ff
0x4011a0 <deregister_tm_clones+32>:	0x2e6666c3	0x00841f0f	0x00000000	0x00401f0f
0x4011b0 <register_tm_clones>:	0x404030be	0xee814800	0x00404030	0x48f08948
0x4011c0 <register_tm_clones+16>:	0x483feec1	0x4803f8c1	0xd148c601	0xb81174fe
0x4011d0 <register_tm_clones+32>:	0x00000000	0x74c08548	0x4030bf07	0xe0ff0040
0x4011e0 <register_tm_clones+48>:	0x2e6666c3	0x00841f0f	0x00000000	0x00401f0f
0x4011f0 <__do_global_dtors_aux>:	0xfa1e0ff3	0x2e313d80	0x75000000	0x89485513
0x401200 <__do_global_dtors_aux+16>:	0xff7ae8e5	0x05c6ffff	0x00002e1f	0x90c35d01
0x401210 <__do_global_dtors_aux+32>:	0x2e6666c3	0x00841f0f	0x00000000	0x00401f0f
0x401220 <frame_dummy>:	0xfa1e0ff3	0x2e668aeb	0x00841f0f	0x00000000
(gdb) q
A debugging session is active.

	Inferior 1 [process 232486] will be killed.

Quit anyway? (y or n) y
